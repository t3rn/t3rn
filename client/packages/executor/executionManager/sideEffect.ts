import "@t3rn/types"
// @ts-ignore
import { T3rnTypesSideEffect } from '@polkadot/types/lookup';
import { TextDecoder } from "util"
const BN = require('bn.js')
import {SfxType, SfxStatus, SecurityLevel} from "@t3rn/sdk/dist/src/side-effects/types";
import {Sdk} from "@t3rn/sdk";
import {BehaviorSubject} from "rxjs";
import {Gateway} from "@t3rn/sdk/dist/src/gateways";

// maps event names to SfxType enum;
export const EventMapper = ["Transfer", "MultiTransfer"]

export type TxOutput = {
    amount: BigInt,
    amountHuman: number,
    asset: string,
}

export class SideEffect {
    step: number;
    status: SfxStatus;
    action: SfxType;
    target: string;
    hasInsurance: boolean;
    gateway: Gateway

    securityLevel: SecurityLevel
    iAmExecuting: boolean;
    relayer: any

    // SideEffect data
    id: string;
    xtxId: string;
    arguments: string[];
    insurance: number;
    reward: number;
    raw: T3rnTypesSideEffect;

    // TargetConfirmation
    inclusionData: any; // contains encoded payload, inclusionProof, and blockHash
    targetInclusionHeight: any;
    executor: string;

    // Risk/Reward Parameters:
    // this is the tx cost in the native currency of the target
    txCostNative: BehaviorSubject<number>;
    // cost of the native asset in USD. Used for tx cost calculation
    nativeAssetPrice: BehaviorSubject<number>;
    // current cost of the assets that are used for the sfx execution
    txOutputAssetPrice: BehaviorSubject<number>;
    // profit that can be generated by executing this sfx
    maxProfitUsd: BehaviorSubject<number> = new BehaviorSubject<number>(0);
    // price for reward assert in USD
    rewardAssetPrice: BehaviorSubject<number> = new BehaviorSubject<number>(0);

    constructor(sideEffect: T3rnTypesSideEffect, id: string, xtxId: string, sdk: Sdk) {
        if(this.knownTransactionInterface(sideEffect.encodedAction)) {
            this.raw = sideEffect;
            this.id = id;
            this.xtxId = xtxId
            this.arguments = sideEffect.encodedArgs.map(entry => entry.toString());
            this.target =  new TextDecoder().decode(sideEffect.target.toU8a())
            this.gateway = sdk.gateways[this.target]
            this.securityLevel = this.evalSecurityLevel(this.gateway.gatewayType)
            this.reward = this.gateway.toFloat(sideEffect.maxReward)
        } else {
            console.log("SideEffect interface unknown!!")
        }
    }

    evalSecurityLevel(gatewayType: any): SecurityLevel {
        if (gatewayType.ProgrammableExternal === '0' || gatewayType.OnCircuit === '0') {
            return SecurityLevel.Escrow
        } else {
            return SecurityLevel.Optimistic
        }
    }

    // sets the step of the sideEffect in its execution
    setStep(step: number) {
        this.step = step
    }

    setRiskRewardParameters(
        txCostNative: BehaviorSubject<number>,
        nativeAssetPrice: BehaviorSubject<number>,
        txOutputAssetPrice: BehaviorSubject<number>,
        rewardAssetPrice: BehaviorSubject<number>
    ){
        this.txCostNative = txCostNative;
        this.nativeAssetPrice = nativeAssetPrice;
        this.txOutputAssetPrice = txOutputAssetPrice;
        this.rewardAssetPrice = rewardAssetPrice;

        this.txCostNative.subscribe((value: number) => {
            this.recomputeMaxProfit()
        })

        this.nativeAssetPrice.subscribe((value: number) => {
            this.recomputeMaxProfit()
        })

        this.txOutputAssetPrice.subscribe((value: number) => {
            this.recomputeMaxProfit()
        })

        this.rewardAssetPrice.subscribe((value: number) => {
            this.recomputeMaxProfit()
        })

    }

    // computes the max profit that can be generated by executing this sfx and updates the maxProfitUsd subject
    recomputeMaxProfit() {
        const txCostUsd = this.gateway.toFloat(this.txCostNative.getValue()) * this.nativeAssetPrice.getValue()
        const txOutputCostUsd = this.txOutputAssetPrice.getValue() * this.getTxOutputs().amountHuman
        const rewardValueUsd = this.rewardAssetPrice.getValue() * this.reward
        const maxProfitUsd = rewardValueUsd - txCostUsd - txOutputCostUsd
        if(maxProfitUsd !== this.maxProfitUsd.getValue()) {
            console.log("MaxProfit:", maxProfitUsd)
            this.maxProfitUsd.next(maxProfitUsd);
        }
    }

    updateStatus(status: SfxStatus) {
        this.status = status;
    }

    // return an array of arguments to execute on target.
    execute(): any[] | void {
        switch(this.action) {
            case SfxType.Transfer: {
                return this.getTransferArguments()
            }
        }
    }

    // returns the amount that needs to be spent to execute (without fees)
    getTxOutputs(): TxOutput  {
        switch(this.action) {
            case SfxType.Transfer: {
                const amount = this.getTransferArguments()[1];
                return {
                    amount: amount,
                    amountHuman: this.gateway.toFloat(amount), // converts to human format
                    asset: this.gateway.ticker
                }
            }
        }
    }

    // updates status
    insuranceBonded(iAmExecuting: boolean) {
        this.status = SfxStatus.PendingExecution;
        this.iAmExecuting = iAmExecuting;
    }

    // sfx was successfully executed on target and has the inclusion proof data
    executedOnTarget(inclusionData: any, executor: any, targetInclusionHeight: any) {
        this.inclusionData = inclusionData;
        this.executor = executor;
        this.targetInclusionHeight = targetInclusionHeight;
        this.status = SfxStatus.ExecutedOnTarget;
    }

    // ensure we can deal with the sfx action and set SfxType
    private knownTransactionInterface(encodedAction: any): boolean {
        switch(encodedAction.toHuman()) {
            case "tran": {
                this.action = SfxType.Transfer
                return true
                break;
            }
            default: {
                return false
            }
        }
    }

    // returns the arguments
    private getTransferArguments(): any[] {
        return [
            this.arguments[1],
            new BN(this.arguments[2].split("0x")[1], 16,"le"),
        ]
    }
}