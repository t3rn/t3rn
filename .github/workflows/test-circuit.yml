name: Circuit

on:
  pull_request:
  push:
    branches:
      - development
    paths:
      - "**/*.rs"
      - "**/Cargo.toml"
      - "**/Cargo.lock"
      - ".github/workflows/test-circuit.yml"
  merge_group:

# Automatically cancel older in-progress jobs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/development' }}

env:
  RUST_BACKTRACE: 1
  RUSTC_WRAPPER: sccache
  CARGO_INCREMENTAL: 0

jobs:
  # This job checks if circuit files has been modified.
  # Using paths in pull request trigger would make required checks unpassable for PRs without expected changes.
  changes:
    runs-on: [self-hosted]
    outputs:
      src: ${{ steps.changes.outputs.src }}

    steps:
      - name: ‚òÅ Checkout git repo
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - "**/*.rs"
              - "**/Cargo.toml"
              - "**/Cargo.lock"
              - ".github/workflows/test-circuit.yml"

      - name: Detected changes
        run: |
          echo Detected changes: "${{ steps.changes.outputs.src }}"

  build-test:
    name: Build & Test Circuit
    runs-on: [self-hosted, rust]
    needs: [changes]
    if: needs.changes.outputs.src == 'true'
    steps:
      - name: ‚òÅ Checkout git repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: ‚öô Install rust toolchain defined in rust-toolchain.toml
        run: |
          rustup show

      - name: üìú Check code format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Install clippy-sarif
        uses: baptiste0928/cargo-install@v2
        with:
          crate: clippy-sarif

      - name: Install sarif-fmt
        uses: baptiste0928/cargo-install@v2
        with:
          crate: sarif-fmt

      - name: üìë Lint code
        run: |
          # We want to fail fast if clippy fails
          set -e
          cargo clippy --all --message-format=json | clippy-sarif | tee results.sarif | sarif-fmt
          echo

          if jq -e -n '[inputs | .runs[] | select(.results[]?.level == "error")] | length > 0' results.sarif >/dev/null; then
            echo "Clippy found errors. Aborting build."
            exit 1
          else
            echo "Clippy found no errors"
          fi

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif
          wait-for-processing: true

      - name: Install nextest
        uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-nextest

      - name: Install cargo-llvm-cov
        uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-llvm-cov

      - name: üìë Test workspace and collect coverage data
        uses: actions-rs/cargo@v1
        with:
          command: llvm-cov
          args: nextest --workspace --locked --features runtime,testing,test-skip-verification --lcov --output-path lcov.info

      - name: Upload coverage data
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }} # this should fix occasional failures when querying Github API
          fail_ci_if_error: true # we want to enforce coverage

      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: lcov.info

  # We should run zombienet only when tests are passing
  smoke-test:
    name: Zombienet Test
    runs-on: [self-hosted, rust]
    needs: [changes, build-test]
    # zombienet is always run before runtime upgrade so any additional run on development is superfluous
    if: needs.changes.outputs.src == 'true' && github.ref != 'refs/heads/development'
    steps:
      - name: ‚òÅÔ∏è Checkout git repo
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Install rust toolchain defined in rust-toolchain.toml
        run: |
          rustup show

      - name: Print sccache stats
        working-directory: tests/zombienet
        run: sccache --show-stats

      - name: üìº Run zombienet smoke tests
        continue-on-error: false
        working-directory: tests/zombienet
        run: ./zombienet.sh smoke

      - name: Print sccache stats
        working-directory: tests/zombienet
        run: sccache --show-stats
