name: t0rn Runtime Upgrade

on:
  push:
    tags:
      # This is a GLOB not a regex. Don't add escape sequences to me
      - "v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+"

env:
  PARACHAIN_NAME: t0rn

jobs:
  runtime-upgrade-smoke-tests:
    runs-on: [self-hosted, rust]
    # This can only run when all release artificats are available
    concurrency: release
    steps:
      - name: ‚òÅ Checkout git repo
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Install rust toolchain defined in rust-toolchain.toml
        run: rustup show

      - name: üìº Run zombienet runtime upgrade test
        continue-on-error: false
        working-directory: tests/zombienet
        run: ./zombienet.sh upgrade ${{ env.PARACHAIN_NAME }}

  runtime-upgrade:
    runs-on: self-hosted
    needs: runtime-upgrade-smoke-tests
    concurrency: runtime-upgrade
    steps:
      - name: ‚òÅ Checkout git repo
        uses: actions/checkout@v3

      - name: Set variables 
        run: |
          echo "PUSHED_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

          # PUSHED_TAG is not available yet in the env, so we need to use GITHUB_REF
          echo "WASM_RELEASE_ASSET=${{ env.PARACHAIN_NAME }}-parachain-runtime-${GITHUB_REF/refs\/tags\//}.compact.compressed.wasm" >> $GITHUB_ENV

      - name: üì• Download runtime WASM
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: t3rn/t3rn
          version: "tags/${{ env.PUSHED_TAG }}"
          file: ${{ env.WASM_RELEASE_ASSET }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üì• Download runtime WASM hash blake2_256
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: t3rn/t3rn
          version: "tags/${{ env.PUSHED_TAG }}"
          file: ${{ env.WASM_RELEASE_ASSET }}.blake2_256
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üöÄ t0rn Runtime Upgrade Dry Run
        run: |
          # We want to run it in case it fails because just multiline env variable would obscure that
          ./scripts/upgrade-runtime-set-code.sh ${{ secrets.RUNTIME_UPGRADE_SEED }} ${{ env.PUSHED_TAG }} ${{ env.PARACHAIN_NAME }} --dry-run

          # This is a workaround for multiline env variable
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "RUNTIME_UPGRADE_OUTPUT<<$EOF" >> $GITHUB_ENV
          ./scripts/upgrade-runtime-set-code.sh ${{ secrets.RUNTIME_UPGRADE_SEED }} ${{ env.PUSHED_TAG }} ${{ env.PARACHAIN_NAME }} --dry-run >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV          

      - name: üöÄ t0rn Runtime Upgrade
        run: |
          ./scripts/upgrade-runtime-set-code.sh ${{ secrets.RUNTIME_UPGRADE_SEED }} ${{ env.PUSHED_TAG }} ${{ env.PARACHAIN_NAME }}
          
      - name: üìü Send Telegram Message
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.TELEGRAM_T0RN_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            üöÄ t0rn Runtime Upgrade
            
            Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ env.PUSHED_TAG }}
            Monitoring: https://monitoring.t3rn.io/d/HyX9GHGVz/chain-statistics?orgId=1&refresh=1m&var-parachain=${{ env.PARACHAIN_NAME }}&var-region=All
            This github action run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  ranger-deploy:
    runs-on: self-hosted
    needs: runtime-upgrade
    steps:
      - name: ‚òÅ Checkout git repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
  
      - name: Build ranger
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: test-t0rn-ranger
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./client
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . -f cli.Dockerfile
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: EKS
        run: aws eks --region ${{ secrets.AWS_DEFAULT_REGION }} update-kubeconfig --name ${{ secrets.AWS_EKS_CLUSTER }}

      - name: Helm Upgrade
        working-directory: ./client/packages/cli
        run: helm upgrade ranger helm -n ranger -f helm/values-t0rn.yaml --set tag=${{ github.sha }},repository="${{ steps.login-ecr.outputs.registry }}/test-t0rn-ranger"