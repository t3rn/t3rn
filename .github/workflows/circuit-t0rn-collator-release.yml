# name: Circuit t0rn Rococo Collator Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+"

# env:
#   PARACHAIN_NAME: t0rn
#   RUST_BACKTRACE: full
#   CARGO_TERM_COLOR: always

# jobs:
#   build-release:
#     runs-on: ["self-hosted", "ep1c"]
#     steps:
#       - name: ☁ Checkout git repo
#         uses: actions/checkout@v3
#         with:
#           submodules: recursive
#           token: ${{ secrets.GH_PAT }}

#       - name: ⚙️ Get nightly rust toolchain with wasm target
#         uses: actions-rs/toolchain@v1
#         with:
#           toolchain: nightly-2023-01-24
#           target: wasm32-unknown-unknown
#           components: rustfmt, clippy
#           override: true

#       - name: 🕒 Cache Rust binaries and packages
#         uses: Swatinem/rust-cache@v2
#         with:
#           cache-on-failure: "true"

#       - name: 🏭 Build circuit
#         uses: actions-rs/cargo@v1
#         continue-on-error: false
#         with:
#           command: build
#           args: --manifest-path ./node/t0rn-parachain/Cargo.toml --locked --release

#       - name: 🕒 Cache binaries
#         uses: actions/cache@v2
#         id: cache-bin
#         with:
#           path: |
#             bin
#           key: ${{ runner.os }}-bin-${{ hashFiles('tests/zombienet/Makefile') }}
#           restore-keys: |
#             ${{ runner.os }}-bin-

#       - name: 📼 Run zombienet runtime upgrade test
#         continue-on-error: false
#         working-directory: tests/zombienet
#         run: make test-real-upgrade parachain=t0rn

#       - name: 📤 Upload binary
#         uses: actions/upload-artifact@v2
#         with:
#           name: ${{ github.sha }}-t0rn-collator-release-artifacts
#           path: ./target/release/t0rn-collator
#           if-no-files-found: error
#           retention-days: 1

#   publish-docker-image:
#     runs-on: self-hosted
#     needs: build-release
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           submodules: recursive
#           token: ${{ secrets.GH_PAT }}

#       - name: 📥 Download circuit collator
#         uses: actions/download-artifact@v2
#         with:
#           name: ${{ github.sha }}-t0rn-collator-release-artifacts
#           path: ./target/release/

#       - name: 🏷️ Get the version tag
#         run: echo "PUSHED_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

#       - name: 🐋 Login to the GitHub Container Registry
#         uses: docker/login-action@v2
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: 🐳 Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: 🐳 Build and publish the Docker image
#         uses: docker/build-push-action@v3
#         with:
#           context: .
#           push: true
#           tags: ghcr.io/t3rn/t0rn-collator:${{ env.PUSHED_TAG }}
#           platforms: linux/amd64
#           file: collator.t0rn.Dockerfile
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           cache-from: type=local,src=/tmp/.buildx-cache
#           cache-to: type=local,dest=/tmp/.buildx-cache

#   release-on-github:
#     runs-on: self-hosted
#     needs: build-release
#     steps:
#       - name: ☁ Checkout git repo
#         uses: actions/checkout@v3

#       - name: 📥 Download circuit collator
#         uses: actions/download-artifact@v2
#         with:
#           name: ${{ github.sha }}-t0rn-collator-release-artifacts
#           path: ./target/release/

#       - name: 🎱 Gzip circuit collator
#         run: |
#           gzip -c ./target/release/t0rn-collator \
#           > ./target/release/t0rn-collator.gz

#       - name: 🖐🏾 Fingerprint the gball
#         run: |
#           sha256sum -b ./target/release/t0rn-collator.gz \
#           | grep -oE '^[a-f0-9]+' \
#           | tr -d '\n' \
#           > ./target/release/t0rn-collator.gz.sha256sum

#       - name: 🏷️ Get the version tag
#         run: echo "PUSHED_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

#       - name: 🖨️ Get the release notes
#         run: |
#           node -e "
#             const lines = require('fs').readFileSync('./CHANGELOG.md', 'utf8').split(/(\n)/g).filter(Boolean);
#             let head = lines.findIndex(l => /^\s*##[^v]+${{ env.PUSHED_TAG }}/.test(l));
#             if (head === -1) { throw Error('cannot parse ${{ env.PUSHED_TAG }} from changelog') }
#             else head = head + 1;
#             let tail = lines.slice(head).findIndex(l => /^\s*##[^v]+v/.test(l));
#             tail = tail === -1 ? lines.length : tail + head;
#             console.log(lines.slice(head, tail).join(''));
#           " \
#           > ./target/release/notes.md

#       - name: 🐙 Create a GitHub release
#         id: create_release
#         uses: actions/create-release@v1.1.4
#         env:
#           GITHUB_TOKEN: ${{ secrets.GH_PAT }}
#         with:
#           tag_name: ${{ env.PUSHED_TAG }}
#           release_name: ${{ env.PUSHED_TAG }}
#           body_path: ./target/release/notes.md
#           draft: false
#           prerelease: true

#       - name: 🍔 Provide the sha256sum as a release asset
#         uses: actions/upload-release-asset@v1.0.2
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: ./target/release/t0rn-collator.gz.sha256sum
#           asset_name: ${{ env.PARACHAIN_NAME }}-t0rn-collator-${{ env.PUSHED_TAG }}-x86_64-unknown-linux-gnu.gz.sha256sum
#           asset_content_type: text/plain

  deploy-to-rococo:
    runs-on: self-hosted
    needs: release-on-github
    steps:
      - name: 🏷️ Get the version tag
        run: echo "PUSHED_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - name: 🚀 Shoot (Upgrade Runtime) latest release to Rococo
        run: |
          CURRENT_HASH=$(curl -sSfH "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "chain_getFinalizedHead", "params": [ ] }' https://rpc.t0rn.io | jq -r .result)
          CURRENT_HEIGHT=$(curl -sSfH "Content-Type: application/json" -d "{\"id\":1, \"jsonrpc\":\"2.0\", \"method\": \"chain_getHeader\", \"params\": [\"${CURRENT_HASH}\"] }" https://rpc.t0rn.io | jq -r .result.number)
          UPGRADE_AT_HEIGHT=$(($CURRENT_HEIGHT + 0x64))
          echo "UPGRADE RUNTIME AT:" ${{env.PUSHED_TAG}} ${UPGRADE_AT_HEIGHT} ${{env.PARACHAIN_NAME}}
          ./scripts/upgrade-runtime-unsafe.sh ${{secrets.RUNTIME_UPGRADE_SEED}} wss://ws.t0rn.io https://rpc.t0rn.io ${{env.PUSHED_TAG}} ${UPGRADE_AT_HEIGHT} ${{env.PARACHAIN_NAME}}

#   trigger-downstream:
#     runs-on: self-hosted
#     needs: release-on-github
#     steps:
#       - name: 🏷️ Get the version tag
#         run: echo "PUSHED_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

#   deploy-to-rococo:
#     runs-on: self-hosted
#     needs: release-on-github
#     steps:
#       - name: 🏷️ Get the version tag
#         run: echo "PUSHED_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
#       - name: 🚀 Shoot (Upgrade Runtime) latest release to Rococo
#         run: |
#           UPGRADE_AT_HEIGHT=$(($(curl -sSfH "Content-Type: application/json" -d '{"id":1, "jsonrpc":"2.0", "method": "chain_getHeader", "params": [ ] }' https://rpc.t0rn.io | jq -r .result.number) + 0x64))
#           echo "UPGRADE RUNTIME AT:" ${{env.PUSHED_TAG}} ${UPGRADE_AT_HEIGHT} ${{env.PARACHAIN_NAME}}
#           ./scripts/upgrade-runtime-unsafe.sh ${{secrets.RUNTIME_UPGRADE_SEED}} wss://ws.t0rn.io https://rpc.t0rn.io ${{env.PUSHED_TAG}} ${UPGRADE_AT_HEIGHT} ${{env.PARACHAIN_NAME}}
