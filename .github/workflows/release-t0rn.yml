name: t0rn Rococo Release

on:
  push:
    branches:
    - development
    paths:
      - "**/*.rs"
      - "**/Cargo.toml"
      - "**/Cargo.lock"
      - "**/runtime-upgrade-t0rn.yml"
      - "specs/*.raw.json"

env:
  PARACHAIN_NAME: t0rn
  RUST_BACKTRACE: full
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  release:
    runs-on: [self-hosted, rust]
    # Dont trigger release when commit message startswith 'build(release):' or contains '[skip release]'
    if: ${{ !(startswith(github.event.head_commit.message, 'build(release):') || contains(github.event.head_commit.message, '[skip release]')) }}
    concurrency: release
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          git_user_signingkey: true
          git_commit_gpgsign: true
          gpg_private_key: ${{ secrets.T3RN_CI_GPG_PRIVATE_KEY }}

      - name: Calculate semantic version
        id: version
        uses: t3rn/semantic-version@v6.0.3
        with:
          tag_prefix: "v"
          major_pattern: "/^(feat|refactor)(\\([a-z]+\\))?!:/"
          minor_pattern: "/^(feat|refactor)(\\([a-z]+\\))?:/"
          version_format: "${major}.${minor}.${patch}-rc.${increment}"
          bump_each_commit: false
          search_commit_body: false
          user_format_type: "json"
          prerelease_name: "rc"

      - name: Cargo Release
        run: |
          git config --global user.email "89840377+t3rn-ci@users.noreply.github.com"
          git config --global user.name "t3rn-ci"
          cargo release -c release.toml --execute --no-confirm -p ${{ env.PARACHAIN_NAME }}-parachain-runtime -p ${{ env.PARACHAIN_NAME }}-parachain-collator ${{ steps.version.outputs.version }}

      - name: Push tag
        run: |
          git tag v${{ steps.version.outputs.version }}
          git push origin v${{ steps.version.outputs.version }}

      - name: Create Release
        id: release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: false
          name: v${{ steps.version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ steps.version.outputs.version }}

      - name: Set variables 
        run: |
          echo "CIRCUIT_BINARY=./target/release/${{ env.PARACHAIN_NAME }}-collator" >> $GITHUB_ENV
          echo "CIRCUIT_RELEASE_ASSET=${{ env.PARACHAIN_NAME }}-collator-v${{ steps.version.outputs.version }}-x86_64-unknown-linux-gnu" >> $GITHUB_ENV
          echo "WASM_BINARY=./target/release/wbuild/${{ env.PARACHAIN_NAME }}-parachain-runtime/${{ env.PARACHAIN_NAME }}_parachain_runtime.compact.compressed.wasm" >> $GITHUB_ENV
          echo "WASM_RELEASE_ASSET=${{ env.PARACHAIN_NAME }}-parachain-runtime-v${{ steps.version.outputs.version }}.compact.compressed.wasm" >> $GITHUB_ENV

      - name: ‚öôÔ∏è Install rust toolchain defined in rust-toolchain.toml
        run: rustup show

      - name: üè≠ Build circuit
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: build
          args: --manifest-path ./node/${{ env.PARACHAIN_NAME }}-parachain/Cargo.toml --locked --release

      - name: ü´ß Build runtime WASM
        run: |
          ./scripts/build_wasm.sh ${{ env.PARACHAIN_NAME }}

      - name: üêã Login to the GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: üê≥ Build and publish the Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/t3rn/${{ env.PARACHAIN_NAME }}-collator:v${{ steps.version.outputs.version }}
          platforms: linux/amd64
          file: collator.${{ env.PARACHAIN_NAME }}.Dockerfile
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: üé± Gzip circuit collator
        run: |
          gzip -c ${{ env.CIRCUIT_BINARY }} > ${{ env.CIRCUIT_BINARY }}.gz

      - name: üñêüèæ Fingerprint the gball
        run: |
          sha256sum -b ${{ env.CIRCUIT_BINARY }}.gz \
          | grep -oE '^[a-f0-9]+' \
          | tr -d '\n' \
          > ${{ env.CIRCUIT_BINARY }}.gz.sha256sum

      - name: üñêüèæ Fingerprint the runtime WASM
        run: |
          sha256sum -b ${{ env.WASM_BINARY }} \
          | grep -oE '^[a-f0-9]+' \
          | tr -d '\n' \
          > ${{ env.WASM_BINARY }}.sha256sum

      - name: üì¶ Upload the circuit collator gball as a release asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ${{ env.CIRCUIT_BINARY }}.gz
          asset_name: ${{ env.CIRCUIT_RELEASE_ASSET }}.gz
          asset_content_type: application/gzip

      - name: üçî Provide the circuit collator sha256sum as a release asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ${{ env.CIRCUIT_BINARY }}.gz.sha256sum
          asset_name: ${{ env.CIRCUIT_RELEASE_ASSET }}.gz.sha256sum
          asset_content_type: text/plain

      - name: üì¶ Upload the runtime WASM as a release asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ${{ env.WASM_BINARY }}
          asset_name: ${{ env.WASM_RELEASE_ASSET }}
          asset_content_type: text/plain

      - name: üçî Provide the runtime WASM sha256sum as a release asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ${{ env.WASM_BINARY }}.sha256sum
          asset_name: ${{ env.WASM_RELEASE_ASSET }}.sha256sum
          asset_content_type: text/plain

      - name: üçî Provide the runtime WASM blake2_256 as a release asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ${{ env.WASM_BINARY }}.blake2_256
          asset_name: ${{ env.WASM_RELEASE_ASSET }}.blake2_256
          asset_content_type: text/plain

      - name: üçî Provide the runtime WASM json info as a release asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ${{ env.WASM_BINARY }}.info.json
          asset_name: ${{ env.WASM_RELEASE_ASSET }}.info.json
          asset_content_type: text/plain
