name: Circuit Collator Release

on:
  push:
    tags:
      - 'v*'

env:
  RELAY_CHAIN_NAME: rococo
  PARA_CHAIN_NAME: t0rn
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  build-release:
    runs-on: ubuntu-20.04
    steps:
      - name: ‚òÅ Checkout git repo
        uses: actions/checkout@master
        with:
          submodules: recursive
          token: ${{ secrets.GH_PAT }}

      - name: ‚öôÔ∏è Get nightly rust toolchain with wasm target
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-11-01
          target: wasm32-unknown-unknown
          components: rustfmt, clippy
          override: true

      - name: üïí Cache Rust binaries and packages
        uses: actions/cache@v2
        id: cache-rust
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ./target
          key: ${{ runner.os }}-cargo-${{ hashFiles('./Cargo.lock') }}

      - name: üè≠ Build circuit
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: build
          args: --manifest-path ./node/parachain/Cargo.toml --locked --release

      - name: üì§ Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.sha }}-collator-release-artifacts
          path: ./target/release/circuit-collator
          if-no-files-found: error
          retention-days: 1

  push-to-docker:
    runs-on: ubuntu-20.04
    needs: build-release
    steps:
      - name: ‚òÅ Checkout git repo
        uses: actions/checkout@v3

      - name: üì• Download circuit
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.sha }}-collator-release-artifacts
          path: ./target/release/

      - name: üêã Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üê≥ Build & publish Docker image
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker build -f docker/circuit-collator.Dockerfile -t t3rn/circuit-collator:latest .
          docker push t3rn/circuit-collator:latest

  release-on-github:
    runs-on: ubuntu-20.04
    needs: build-release
    steps:
      - name: ‚òÅ Checkout git repo
        uses: actions/checkout@v3

      - name: üì• Download circuit collator
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.sha }}-collator-release-artifacts
          path: ./target/release/

      - name: üé± Gzip circuit collator
        run: |
          gzip -c ./target/release/circuit-collator \
          > ./target/release/circuit-collator.gz

      - name: üñêüèæ Fingerprint the gball
        run: |
          sha256sum -b ./target/release/circuit-collator.gz \
          | grep -oE '^[a-f0-9]+' \
          | tr -d '\n' \
          > ./target/release/circuit-collator.gz.sha256sum

      - name: üè∑Ô∏è Get the version tag
        run: echo "PUSHED_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: üñ®Ô∏è Get the release notes
        run: |
          node -e "
            const lines = require('fs').readFileSync('./CHANGELOG.md', 'utf8').split(/(\n)/g).filter(Boolean);
            let head = lines.findIndex(l => /^\s*##[^v]+${{ env.PUSHED_TAG }}/.test(l));
            if (head === -1) { throw Error('cannot parse ${{ env.PUSHED_TAG }} from changelog') }
            else head = head + 1;
            let tail = lines.slice(head).findIndex(l => /^\s*##[^v]+v/.test(l));
            tail = tail === -1 ? lines.length : tail + head;
            console.log(lines.slice(head, tail).join(''));
          " \
          > ./target/release/notes.md

      - name: üêô Create a GitHub release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          tag_name: ${{ env.PUSHED_TAG }}
          release_name: ${{ env.PUSHED_TAG }}
          body_path: ./target/release/notes.md
          draft: false
          prerelease: true

      - name: ‚ö° Provide the raw parachain chain spec
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./specs/${{ env.PARA_CHAIN_NAME }}.raw.json
          asset_name: ${{ env.PARA_CHAIN_NAME }}.raw.json
          asset_content_type: application/json

      - name: üé¢ Provide the raw relay chain spec
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./specs/${{ env.RELAY_CHAIN_NAME }}.raw.json
          asset_name: ${{ env.RELAY_CHAIN_NAME }}.raw.json
          asset_content_type: application/json

      - name: üçî Provide the sha256sum as a release asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/circuit-collator.gz.sha256sum
          asset_name: ${{ env.PARA_CHAIN_NAME }}-circuit-collator-${{ env.PUSHED_TAG }}-x86_64-unknown-linux-gnu.gz.sha256sum
          asset_content_type: text/plain

      - name: üì¶ Upload the circuit parachain collator gball as a release asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/circuit-collator.gz
          asset_name: ${{ env.PARA_CHAIN_NAME }}-circuit-collator-${{ env.PUSHED_TAG }}-x86_64-unknown-linux-gnu.gz
          asset_content_type: application/gzip
