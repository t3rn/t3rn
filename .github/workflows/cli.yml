name: CLI

on:
  pull_request:
  merge_group:

permissions:
  pull-requests: read
  checks: write

jobs:
  # This job checks if files has been modified.
  # Using paths in pull request trigger would make required checks unpassable for PRs without expected changes.
  changes:
    runs-on: [self-hosted]
    outputs:
      src: ${{ steps.changes.outputs.src }}

    steps:
      - name: ☁ Checkout git repo
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          # TODO: can be removed when we have npm packages
          # - "client/packages/**/*.ts"
          # - "client/packages/**/*.json"
          filters: |
            src:
            - "client/cli.Dockerfile"
            - "client/packages/**/*.ts"
            - "client/packages/**/*.json"
            - "client/packages/cli/**/*.ts"
            - "client/packages/helm/**"
            - "client/packages/cli/**/*.json"
            - ".github/workflows/cli.yml"


      - name: Detected changes
        run: |
          echo Detected changes: "${{ steps.changes.outputs.src }}"

  test-cli:
    name: Test CLI
    needs: [changes]
    if: needs.changes.outputs.src == 'true'
    defaults:
      run:
        working-directory: client/packages/cli

    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3

      - name: Read .nvmrc
        run: echo NVMRC=`cat .nvmrc` >> $GITHUB_ENV

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NVMRC }}

      - run: cd .. && make all

      - name: Save Code Linting Report JSON
        if: github.event_name == 'pull_request'
        run: npm run lint:report
        # Continue to the next step even if this fails
        continue-on-error: true

      - name: Annotate Code Linting Results
        if: github.event_name == 'pull_request'
        uses: ataylorme/eslint-annotate-action@v2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          report-json: client/packages/cli/eslint_report.json

      - run: pnpm test

  build-docker:
    name: Build Docker CLI
    needs: [changes]
    if: needs.changes.outputs.src == 'true'

    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker
        working-directory: ./client
        run: |
          docker build . -f cli.Dockerfile

  deploy:
    runs-on: self-hosted
    needs: [test-cli]

    if: github.ref == 'refs/heads/development' || contains(github.event.pull_request.labels.*.name, 'deploy-cli')

    steps:
      - name: ☁ Checkout git repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build CLI
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: test-t0rn-cli
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ./client
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . -f cli.Dockerfile
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: EKS
        run: aws eks --region ${{ secrets.AWS_DEFAULT_REGION }} update-kubeconfig --name ${{ secrets.AWS_EKS_CLUSTER }}

      - name: Helm Upgrade
        working-directory: ./client/packages/cli
        run: helm upgrade cli helm -n cli -f helm/values-t0rn.yaml --set tag=${{ github.sha }},repository="${{ steps.login-ecr.outputs.registry }}/test-t0rn-cli"

