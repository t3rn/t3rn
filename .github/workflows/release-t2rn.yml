name: t2rn Release

on:
  push:
    tags:
      # This is a GLOB not a regex. Don't add escape sequences to me
      - "v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+"

env:
  PARACHAIN_NAME: t2rn
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  RUSTC_WRAPPER: sccache
  RUST_BACKTRACE: full

jobs:
  build-release:
    runs-on: [self-hosted, rust]
    name: t2rn Release
    concurrency: runtime-upgrade-t2rn
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          git_user_signingkey: true
          git_commit_gpgsign: true
          gpg_private_key: ${{ secrets.T3RN_CI_GPG_PRIVATE_KEY }}

      - name: Get release
        id: release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Set variables 
        run: |
          echo "${{ steps.release.outputs.upload_url }}"
          echo "PUSHED_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
          echo "CIRCUIT_BINARY=./target/release/${{ env.PARACHAIN_NAME }}-collator" >> $GITHUB_ENV
          echo "CIRCUIT_RELEASE_ASSET=${{ env.PARACHAIN_NAME }}-collator-${GITHUB_REF/refs\/tags\//}-x86_64-unknown-linux-gnu" >> $GITHUB_ENV
          echo "WASM_BINARY=./target/release/wbuild/${{ env.PARACHAIN_NAME }}-parachain-runtime/${{ env.PARACHAIN_NAME }}_parachain_runtime.compact.compressed.wasm" >> $GITHUB_ENV
          echo "WASM_RELEASE_ASSET=${{ env.PARACHAIN_NAME }}-parachain-runtime-${GITHUB_REF/refs\/tags\//}.compact.compressed.wasm" >> $GITHUB_ENV

      - name: ⚙️ Install rust toolchain defined in rust-toolchain.toml
        run: rustup show

      - name: ⚙️ Make sure we have the wasm32-unknown-unknown target
        run: rustup target add wasm32-unknown-unknown

      - name: 🏭 Build circuit
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: build
          args: --manifest-path ./node/${{ env.PARACHAIN_NAME }}-parachain/Cargo.toml --locked --release

      - name: 🫧 Build runtime WASM
        run: |
          ./scripts/build_wasm.sh ${{ env.PARACHAIN_NAME }}

      - name: 🐋 Login to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build and publish the Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/t3rn/${{ env.PARACHAIN_NAME }}-collator:${{ env.PUSHED_TAG }}
          platforms: linux/amd64
          file: collator.${{ env.PARACHAIN_NAME }}.Dockerfile
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: 🎱 Gzip circuit collator
        run: |
          gzip -c ${{ env.CIRCUIT_BINARY }} > ${{ env.CIRCUIT_BINARY }}.gz

      - name: 🖐🏾 Fingerprint the gball
        run: |
          sha256sum -b ${{ env.CIRCUIT_BINARY }}.gz \
          | grep -oE '^[a-f0-9]+' \
          | tr -d '\n' \
          > ${{ env.CIRCUIT_BINARY }}.gz.sha256sum

      - name: 🖐🏾 Fingerprint the runtime WASM
        run: |
          sha256sum -b ${{ env.WASM_BINARY }} \
          | grep -oE '^[a-f0-9]+' \
          | tr -d '\n' \
          > ${{ env.WASM_BINARY }}.sha256sum

      - name: 📦 Upload the circuit collator gball as a release asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ${{ env.CIRCUIT_BINARY }}.gz
          asset_name: ${{ env.CIRCUIT_RELEASE_ASSET }}.gz
          asset_content_type: application/gzip

      - name: 🍔 Provide the circuit collator sha256sum as a release asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ${{ env.CIRCUIT_BINARY }}.gz.sha256sum
          asset_name: ${{ env.CIRCUIT_RELEASE_ASSET }}.gz.sha256sum
          asset_content_type: text/plain

      - name: 📦 Upload the runtime WASM as a release asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ${{ env.WASM_BINARY }}
          asset_name: ${{ env.WASM_RELEASE_ASSET }}
          asset_content_type: text/plain

      - name: 🍔 Provide the runtime WASM sha256sum as a release asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ${{ env.WASM_BINARY }}.sha256sum
          asset_name: ${{ env.WASM_RELEASE_ASSET }}.sha256sum
          asset_content_type: text/plain

      - name: 🍔 Provide the runtime WASM json info as a release asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ${{ env.WASM_BINARY }}.info.json
          asset_name: ${{ env.WASM_RELEASE_ASSET }}.info.json
          asset_content_type: text/plain

  runtime-upgrade:
    runs-on: self-hosted
    concurrency: runtime-upgrade-t2rn
    steps:
      - name: ☁ Checkout git repo
        uses: actions/checkout@v4

      - name: Set variables 
        run: |
          echo "PUSHED_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

          # PUSHED_TAG is not available yet in the env, so we need to use GITHUB_REF
          echo "WASM_RELEASE_ASSET=${{ env.PARACHAIN_NAME }}-parachain-runtime-${GITHUB_REF/refs\/tags\//}.compact.compressed.wasm" >> $GITHUB_ENV

      - name: 📥 Download runtime WASM
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: t3rn/t3rn
          version: "tags/${{ env.PUSHED_TAG }}"
          file: ${{ env.WASM_RELEASE_ASSET }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📥 Download runtime WASM info
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: t3rn/t3rn
          version: "tags/${{ env.PUSHED_TAG }}"
          file: ${{ env.WASM_RELEASE_ASSET }}.info.json
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 t2rn Runtime Upgrade Dry Run
        run: |
          # We want to run it in case it fails because just multiline env variable would obscure that
          ./scripts/upgrade-runtime-set-code.sh ${{ secrets.RUNTIME_UPGRADE_T2RN }} ${{ env.PUSHED_TAG }} ${{ env.PARACHAIN_NAME }} --dry-run

          # This is a workaround for multiline env variable
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "RUNTIME_UPGRADE_OUTPUT<<$EOF" >> $GITHUB_ENV
          ./scripts/upgrade-runtime-set-code.sh ${{ secrets.RUNTIME_UPGRADE_T2RN }} ${{ env.PUSHED_TAG }} ${{ env.PARACHAIN_NAME }} --dry-run >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV          

      - name: 🚀 t2rn Runtime Upgrade
        run: |
          ./scripts/upgrade-runtime-set-code.sh ${{ secrets.RUNTIME_UPGRADE_T2RN }} ${{ env.PUSHED_TAG }} ${{ env.PARACHAIN_NAME }}
          
      - name: 📟 Send Telegram Message
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.TELEGRAM_T0RN_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            🚀 t2rn Runtime Upgrade ${{ env.PUSHED_TAG }}
            
            Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ env.PUSHED_TAG }}
            Monitoring: https://monitoring.t3rn.io/d/HyX9GHGVz/chain-statistics?orgId=1&refresh=1m&var-parachain=${{ env.PARACHAIN_NAME }}&var-region=All
            Github Action Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
