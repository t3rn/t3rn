
//! Autogenerated weights for `pallet_vacuum`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-13, STEPS: `1000`, REPEAT: `1000`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Maciejs-Mac-Studio.local`, CPU: `<UNKNOWN>`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("local")`, DB CACHE: 1024

// Executed Command:
// ./target/debug/t0rn-collator
// benchmark
// pallet
// --chain
// local
// --wasm-execution=compiled
// --pallet
// pallet_vacuum
// --extrinsic
// single_order
// --steps
// 1000
// --repeat
// 1000
// --output
// vacuum-weight.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;


pub trait WeightInfo {
    fn single_order() -> Weight;
}
pub struct SubstrateWeight<T>(PhantomData<T>);

/// Weight functions for `pallet_vacuum`.
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// Storage: `XDNS::Gateways` (r:2 w:0)
    /// Proof: `XDNS::Gateways` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `XDNS::EpochHistory` (r:1 w:0)
    /// Proof: `XDNS::EpochHistory` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `XDNS::VerifierOverviewStoreHistory` (r:1 w:0)
    /// Proof: `XDNS::VerifierOverviewStoreHistory` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Circuit::XExecSignals` (r:1 w:1)
    /// Proof: `Circuit::XExecSignals` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `XDNS::GatewaysOverviewStore` (r:1 w:1)
    /// Proof: `XDNS::GatewaysOverviewStore` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `XDNS::Tokens` (r:1 w:0)
    /// Proof: `XDNS::Tokens` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Attesters::Batches` (r:1 w:0)
    /// Proof: `Attesters::Batches` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `XDNS::GatewaysOverviewStoreHistory` (r:1 w:1)
    /// Proof: `XDNS::GatewaysOverviewStoreHistory` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `XDNS::SFXABIRegistry` (r:1 w:0)
    /// Proof: `XDNS::SFXABIRegistry` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AccountManager::PendingCharges` (r:1 w:1)
    /// Proof: `AccountManager::PendingCharges` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Circuit::PendingXtxTimeoutsMap` (r:0 w:1)
    /// Proof: `Circuit::PendingXtxTimeoutsMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Circuit::LocalXtxStates` (r:0 w:1)
    /// Proof: `Circuit::LocalXtxStates` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Circuit::PendingXtxBidsTimeoutsMap` (r:0 w:1)
    /// Proof: `Circuit::PendingXtxBidsTimeoutsMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Circuit::SFX2XTXLinksMap` (r:0 w:1)
    /// Proof: `Circuit::SFX2XTXLinksMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Circuit::FullSideEffects` (r:0 w:1)
    /// Proof: `Circuit::FullSideEffects` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn single_order() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1237`
        //  Estimated: `7177`
        // Minimum execution time: 1_019_000_000 picoseconds.
        Weight::from_parts(1_443_000_000, 0)
            .saturating_add(Weight::from_parts(0, 7177))
            .saturating_add(T::DbWeight::get().reads(11))
            .saturating_add(T::DbWeight::get().writes(9))
    }
}
