//! Autogenerated weights for pallet_circuit_circuit_portal
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-09-24, STEPS: `[50, ]`, REPEAT: 100, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/circuit
// benchmark
// --chain=dev
// --steps=50
// --repeat=100
// --pallet=pallet_circuit_circuit_portal
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./src/circuit-portal/src/weights.rs
// --template=../benchmarking/frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_circuit_circuit_portal.
pub trait WeightInfo {
    fn register_gateway_default_polka() -> Weight;
    fn register_gateway_polka_u64() -> Weight;
    fn register_gateway_default_eth() -> Weight;
    fn register_gateway_eth_u64() -> Weight;
    fn submit_parachain_header(v: u32, p: u32) -> Weight;
    fn update_gateway() -> Weight;
}

/// Weights for pallet_circuit_circuit_portal using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn update_gateway() -> Weight {
        6_000_000_u64
    }

    fn register_gateway_default_polka() -> Weight {
        68_373_000_u64
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }

    fn register_gateway_polka_u64() -> Weight {
        68_058_000_u64
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }

    fn register_gateway_default_eth() -> Weight {
        68_073_000_u64
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }

    fn register_gateway_eth_u64() -> Weight {
        67_939_000_u64
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }

    fn submit_parachain_header(v: u32, p: u32) -> Weight {
        (0 as Weight)
            .saturating_add((160_060_000 as Weight).saturating_mul(v as Weight))
            .saturating_add((640_223_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(5 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn update_gateway() -> Weight {
        6_000_000_u64
    }

    fn register_gateway_default_polka() -> Weight {
        68_373_000_u64
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(7_u64))
    }

    fn register_gateway_polka_u64() -> Weight {
        68_058_000_u64
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(7_u64))
    }

    fn register_gateway_default_eth() -> Weight {
        68_073_000_u64
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(7_u64))
    }

    fn register_gateway_eth_u64() -> Weight {
        67_939_000_u64
            .saturating_add(RocksDbWeight::get().reads(4_u64))
            .saturating_add(RocksDbWeight::get().writes(7_u64))
    }

    fn submit_parachain_header(v: u32, p: u32) -> Weight {
        (0 as Weight)
            .saturating_add((160_060 as Weight).saturating_mul(v as Weight))
            .saturating_add((640_223 as Weight).saturating_mul(p as Weight))
            .saturating_add(RocksDbWeight::get().reads(5 as Weight))
            .saturating_add(RocksDbWeight::get().writes(3 as Weight))
    }
}
