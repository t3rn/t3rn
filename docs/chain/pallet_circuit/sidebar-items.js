window.SIDEBAR_ITEMS = {"constant":[["KEY_TYPE","Defines application identifier for crypto keys of this module. Every module that deals with signatures needs to declare its unique identifier for its crypto keys. When offchain worker is signing transactions it’s going to request keys of type `KeyTypeId` from the keystore and use the ones it finds to sign the transaction. The keys can be inserted manually via RPC (see `author_insertKey`)."]],"enum":[["BenefitSource",""],["CircuitRole",""],["ContractAccessError","The possible errors that can happen querying the storage of a contract."],["GatewayExpectedOutput","Inbound Steps that specifie expected data deposited by relayers back to the Circuit after each step"],["GatewayType",""],["GatewayVendor",""],["HA",""],["Outcome",""],["ProofTriePointer","Inclusion proofs of different tries"],["ReadLatestGatewayHeight","Read latest height of gateway known to a light client"],["SecurityLvl",""],["SignalKind",""],["Type","ToDo: Introduce Compact Encoding for u8 + u16 + u32"]],"fn":[["check_merkle_proof","Check ethereum merkle proof. Returns Ok(computed-root) if check succeeds. Returns Err(computed-root) if check fails."],["compute_merkle_root_blake2","Compute ethereum merkle root."],["compute_merkle_root_keccak256","Compute ethereum merkle root."],["get_xtx_status",""],["retrieve_gateway_pointers","Retrieves all available gateways for a given ChainId. Currently returns a vector with a single hardcoded result. Eventually this will search all known gateways on pallet-xdns."]],"mod":[["abi",""],["account_manager",""],["bridges",""],["circuit",""],["circuit_portal",""],["claimable",""],["clock",""],["common",""],["contract_metadata",""],["contracts_registry",""],["escrow",""],["executors",""],["gateway_inbound_protocol",""],["match_format",""],["monetary",""],["optimistic",""],["pallet","The module that hosts all the FRAME types needed to add this pallet to a runtime."],["portal",""],["protocol",""],["side_effect",""],["signature_caster",""],["state",""],["storage",""],["threevm",""],["transfers",""],["volatile",""],["weights","Autogenerated weights for pallet_circuit_circuit_portal"],["xdns",""],["xtx",""]],"struct":[["CircuitInboundResult","Inbound Steps that specifie expected data deposited by relayers back to the Circuit after each step"],["CircuitOutboundMessage","Outbound Step that specifies expected transmission medium for relayers connecting with that gateway. Request message format that derivative of could be compatible with JSON-RPC API with either signed or unsigned payload or custom transmission medium like XCMP protocol"],["Compose","A struct that encodes RPC parameters required for a call to a smart-contract."],["ConfirmedSideEffect",""],["ExecutionSignal","A representation of a signal"],["ExtraMessagePayload","Outbound Step that specifies expected transmission medium for relayers connecting with that gateway. Extra payload in case the message is signed ro has other custom parameters required by linking protocol."],["FullSideEffect",""],["GatewayABIConfig","Describe ABI configuration for a gateway so that it’s possible to cast types of inbound and outbound messages to that gateway"],["GatewayGenesisConfig",""],["GatewayPointer",""],["GatewaySysProps","Represents assorted gateway system properties."],["GenericPrimitivesHeader","Structure used at gateway registration as a starting point for multi-finality-verifier"],["HardenedSideEffect",""],["LocalState",""],["Payload","Payload used by this example crate to hold price data required to submit a transaction."],["RpcPayloadSigned",""],["RpcPayloadUnsigned",""],["SFXBid","All Executors from the active set can bid for SFX executions in order to claim the rewards (max_fee) set by users, ultimately competing against one another on the open market rules. In case bid goes on Optimistic SFX, Executor will also have their bonded stake reserve to insure other Optimistic Executors co-executing given Xtx with their bonded collateral (reserved_bond) Their balance"],["SideEffect",""],["StepConfirmation",""],["UncheckedExtrinsic","Simple blob to hold an extrinsic without committing to its format and ensure it is serialized correctly."],["Xtx","A composable cross-chain (X) transaction that has already been verified to be valid and submittable"]],"trait":[["AccountManager",""],["CircuitPortal",""],["EscrowTrait",""],["Executors",""],["GatewayInboundProtocol",""],["Portal",""],["Xdns",""]],"type":[["AccountId",""],["AccountPublic","Alias to the public key used for this chain, actually a `MultiSigner`. Like the signature, this also isn’t a fixed size when encoded, as different cryptos have different size public keys."],["Balance","Balance of an account."],["Block",""],["BlockNumber","Common types across all runtimes"],["Bytes",""],["ChainId",""],["EscrowCurrencyOf",""],["EscrowedBalanceOf",""],["FetchContractsResult","A result type of a get storage call."],["GenericAddress",""],["Hash","A hash of some data used by the chain."],["Header",""],["Nonce","Index of a transaction in the chain. 32-bit should be plenty."],["SideEffectId",""],["SystemHashing",""],["XExecSignalId",""],["XExecStepSideEffectId",""],["XtxId",""]]};