window.SIDEBAR_ITEMS = {"enum":[["PrometheusError","The error types for prometheus."]],"fn":[["metric_name","Returns metric name optionally prefixed with given prefix."],["register",""],["set_gauge_value","Set value of gauge metric."]],"struct":[["Counter","The underlying implementation for [`Counter`] and [`IntCounter`]."],["F64","A atomic float."],["FloatJsonValueMetric","Metric that represents float value received from HTTP service as float gauge."],["Gauge","The underlying implementation for [`Gauge`] and [`IntGauge`]."],["GlobalMetrics","Global Prometheus metrics."],["MetricsAddress","Unparsed address that needs to be used to expose Prometheus metrics."],["MetricsParams","Prometheus endpoint MetricsParams."],["Opts","A struct that bundles the options for creating most [`Metric`] types."],["Registry","A struct for registering Prometheus collectors, collecting their metrics, and gathering them into `MetricFamilies` for exposition."],["U64","A atomic unsigned integer."]],"trait":[["Atomic","An interface for atomics. Used to generically model float metrics and integer metrics, i.e. `Counter` and `IntCounter`."],["Collector","An interface for collecting metrics."],["Metrics","Metrics API."],["StandaloneMetrics","Standalone metrics API."]],"type":[["CounterVec","The underlying implementation for [`CounterVec`] and [`IntCounterVec`]."],["GaugeVec","The underlying implementation for [`GaugeVec`] and [`IntGaugeVec`]."]]};