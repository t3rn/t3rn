window.SIDEBAR_ITEMS = {"enum":[["ContractAccessError","The possible errors that can happen querying the storage of a contract."],["GatewayExpectedOutput","Inbound Steps that specifie expected data deposited by relayers back to the Circuit after each step"],["GatewayType",""],["GatewayVendor",""],["ProofTriePointer","Inclusion proofs of different tries"],["ReadLatestGatewayHeight","Read latest height of gateway known to a light client"]],"fn":[["retrieve_gateway_pointers","Retrieves all available gateways for a given ChainId. Currently returns a vector with a single hardcoded result. Eventually this will search all known gateways on pallet-xdns."]],"mod":[["abi",""],["account_manager",""],["bridges",""],["circuit",""],["circuit_portal",""],["claimable",""],["clock",""],["common",""],["contract_metadata",""],["contracts_registry",""],["executors",""],["gateway_inbound_protocol",""],["match_format",""],["monetary",""],["portal",""],["protocol",""],["side_effect",""],["signature_caster",""],["storage",""],["threevm",""],["transfers",""],["volatile",""],["xdns",""],["xtx",""]],"struct":[["CircuitInboundResult","Inbound Steps that specifie expected data deposited by relayers back to the Circuit after each step"],["CircuitOutboundMessage","Outbound Step that specifies expected transmission medium for relayers connecting with that gateway. Request message format that derivative of could be compatible with JSON-RPC API with either signed or unsigned payload or custom transmission medium like XCMP protocol"],["Compose","A struct that encodes RPC parameters required for a call to a smart-contract."],["ExtraMessagePayload","Outbound Step that specifies expected transmission medium for relayers connecting with that gateway. Extra payload in case the message is signed ro has other custom parameters required by linking protocol."],["GatewayGenesisConfig",""],["GatewayPointer",""],["GatewaySysProps","Represents assorted gateway system properties."],["GenericPrimitivesHeader","Structure used at gateway registration as a starting point for multi-finality-verifier"],["RpcPayloadSigned",""],["RpcPayloadUnsigned",""],["UncheckedExtrinsic","Simple blob to hold an extrinsic without committing to its format and ensure it is serialized correctly."]],"trait":[["EscrowTrait",""]],"type":[["AccountId",""],["AccountPublic","Alias to the public key used for this chain, actually a `MultiSigner`. Like the signature, this also isnâ€™t a fixed size when encoded, as different cryptos have different size public keys."],["Balance","Balance of an account."],["Block",""],["BlockNumber","Common types across all runtimes"],["Bytes",""],["ChainId",""],["FetchContractsResult","A result type of a get storage call."],["GenericAddress",""],["Hash","A hash of some data used by the chain."],["Header",""],["Nonce","Index of a transaction in the chain. 32-bit should be plenty."]]};